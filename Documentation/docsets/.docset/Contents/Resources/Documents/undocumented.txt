CardInputField.swift
	@objc public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
DateInputField.swift
	public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
	public func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int
	public func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int
	public func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?
	public func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)
SecurityInputField.swift
	public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
CardLogoView.swift
	public enum CardLogoType
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	case Visa, MasterCard, AMEX, Maestro, CIDV, CVC, Unknown
	public class CardLogoView: UIView
	public var type: CardLogoType = .Unknown
	public required init(type: CardLogoType = .Unknown)
	public required init?(coder aDecoder: NSCoder)
	public override func drawRect(rect: CGRect)
	public func drawCardAmex()
	public func drawCardCIDV()
	public func drawCardCVC()
	public func drawCardMaestro()
	public func drawCardMasterCard()
	public func drawCardUnknown()
	public func drawCardVisa()
PostCodeInputField.swift
	public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
JPayViewController.swift
	public private (set) var amount: Amount?
	public private (set) var judoID: String?
	public private (set) var reference: Reference?
	public private (set) var cardDetails: CardDetails?
	public private (set) var paymentToken: PaymentToken?
	required public init?(coder aDecoder: NSCoder)
	override public func viewDidLoad()
	public override func viewDidAppear(animated: Bool)
	public func toggleStartDateVisibility(isVisible: Bool)
	public func toggleAVSVisibility(isVisible: Bool, completion: (() -> ())? = nil)
	public func cardInput(input: CardInputField, error: JudoError)
	public func cardInput(input: CardInputField, didFindValidNumber cardNumberString: String)
	public func cardInput(input: CardInputField, didDetectNetwork network: CardNetwork)
	public func dateInput(input: DateInputField, error: JudoError)
	public func dateInput(input: DateInputField, didFindValidDate date: String)
	public func issueNumberInputDidEnterCode(inputField: IssueNumberInputField, issueNumber: String)
	public func billingCountryInputDidEnter(input: BillingCountryInputField, billingCountry: BillingCountry)
	public func judoPayInput(input: JudoPayInputField, isValid: Bool)
	public func judoPayInputDidChangeText(input: JudoPayInputField)
	public func webView(webView: UIWebView, shouldStartLoadWithRequest request: NSURLRequest, navigationType: UIWebViewNavigationType) -> Bool
	public func webViewDidFinishLoad(webView: UIWebView)
3DSWebView.swift
	public class _DSWebView: UIWebView
	public init()
	public override init(frame: CGRect)
	public required init?(coder aDecoder: NSCoder)
	public func setupView()
	public func load3DSWithPayload(payload: [String : AnyObject]) throws -> String
LoadingView.swift
	public class LoadingView: UIView
	public init()
	override public init(frame: CGRect)
	required public init?(coder aDecoder: NSCoder)
PayButton.swift
	public class PayButton: UIButton
	public init()
	public override init(frame: CGRect)
	public required init?(coder aDecoder: NSCoder)
	public func setupView()
IssueNumberInputField.swift
	public class IssueNumberInputField: JudoPayInputField
	public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
BillingCountryInputField.swift
	public func textField(textField: UITextField, shouldChangeCharactersInRange range: NSRange, replacementString string: String) -> Bool
	public func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int
	public func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int
	public func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?
	public func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)
UIColor+Judo.swift
	public func inverseColor() -> UIColor
	public static func colorMode() -> Bool
	public static func judoDarkGrayColor() -> UIColor
	public static func judoLightGrayColor() -> UIColor
	public static func judoGrayColor() -> UIColor
	public static func judoButtonColor() -> UIColor
	public static func judoButtonTitleColor() -> UIColor
	public static func judoLoadingBackgroundColor() -> UIColor
	public static func judoRedColor() -> UIColor
	public static func judoLoadingBlockViewColor() -> UIColor
	public static func judoInputFieldBackgroundColor() -> UIColor
